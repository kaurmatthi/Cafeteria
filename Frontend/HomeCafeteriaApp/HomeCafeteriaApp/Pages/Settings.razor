@page "/Settings"
@using HomeCafeteriaApp.Models
@using HomeCafeteriaApp.Api
@inject IJSRuntime _jsRuntime
@inject NavigationManager _nav;

<div class="container text-center">

    <div class="row mb-3">
        <h2>Settings</h2>
    </div>
    @if (_alert)
    {
        @if (_success)
        {
            <Alert AlertType="@_alertTypeSuccess" Message="@AlertMessageSuccess()" Dismiss="() => ToggleMessage(false)"></Alert>
        }
        @if (!_success)
        {
            <Alert AlertType="@_alertTypeFail" Message="@AlertMessageFail()" Dismiss="() => ToggleMessage(false)"></Alert>
        }
    }
    <div class="container">
        <div class="row d-flex justify-content-center">
            <div class="d-flex col-lg-3 col-md-4 col-sm-5">
                <div class="row d-flex justify-content-center text-center">
                    <h5>Add products</h5>
                    <div>
                        <select @bind="_selectedProduct" class="form-control">
                            <option value="">Select product</option>
                            @foreach (var type in Types)
                            {
                                <option value="@type.Id">@type.Name</option>
                            }
                        </select>
                    </div>
                    <div>
                        <input @bind="Count" type="number" class="form-control" min="0" max="1000">
                    </div>
                    <div class="col-6">
                        <button class="form-control btn btn-primary" @onclick="AddProducts">Add</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    public List<ProductView> Types = new ();
    private readonly ApiHandler _handler = new ();
    private string _selectedProduct = "";
    private int Count { get; set; }
    private bool _alert;
    private bool _success;
    private string _alertTypeSuccess = "success";
    private string _alertTypeFail = "danger";
    private string _message = "";
    private string AlertMessageSuccess() => $"Successfully added {_message} products.";
    private string AlertMessageFail() => "Error adding products.";

    protected override async Task OnInitializedAsync()
    {
        var token = await GetToken();
        var result = await _handler.Authenticate(token);
        if (result is {IsSuccessStatusCode: false }) _nav.NavigateTo(_nav.BaseUri);
        Types = await _handler.GetProducts();
    }

    private void ValidateAmount() 
        => Count = Count > 1000 ? Count = 1000 : Count = Count;

    private async Task AddProducts()
    {
        if (Count > 0 && _selectedProduct != "")
        {
            ValidateAmount();
            var response = await _handler.AddProducts(_selectedProduct, Count);
            if (response is {IsSuccessStatusCode: true }) _success = true;
            SetMessage();
            _selectedProduct = "";
            Count = 0;
        }
        else _success = false;

        ToggleMessage(true);
    }

    private void SetMessage()
    {
        var name = Types.FirstOrDefault(x => x.Id == _selectedProduct)?.Name;
        if (name != null) _message = $"{Count} {name}";
    }

    private void ToggleMessage(bool active)
    {
        _alert = active;
        StateHasChanged();
    }

    private async Task<string> GetToken() 
        => await _jsRuntime.InvokeAsync<string>("localStorage.getItem", "salesmanId");

}
